Platforma “Online shop” cu urmatoarele functionalitati:
➢ Sa existe 4 tipuri de utilizatori: utilizator neinregistrat, inregistrat, colaborator, administrator (0.5p).
➢ Utilizatorul colaborator poate adauga produse in magazine. Acesta va trimite cereri de adaugare administratorului, iar acesta le poate respinge sau aproba. Dupa aprobare produsele vor putea fi vizualizate in magazin (1.0p).
➢ Produsele fac parte din categorii. Categoriile sunt create dinamic de catre administrator. Dinamic insemnand ca acesta poate adauga noi categorii direct din interfata aplicatiei. De asemenea, adminul este cel care poate vizualiza, edita si sterge categoriile ori de cate ori este necesar (1.0p).
➢ Un produs are titlu, descriere, poza, pret, stoc, rating (1-5 stele), review-uri din partea utilizatorilor. Fiecare utilizator acorda un rating de la 1 la 5. Ratingul nu este un camp obligatoriu. In final, fiecare produs are un scor, calculat pe baza tuturor ratingurilor existente. Review-ul este un comentariu de tip text lasat de utilizatori. Acest camp nu este obligatoriu. Restul campurilor sunt obligatorii. Stocul reprezinta numarul de produse din baza de date. (1.0p).
➢ Utilizatorul colaborator poate sa editeze si sa stearga produsele adaugate de el. Dupa editare, produsul necesita din nou aprobare din partea administratorului (1.0p).
➢ Utilizatorul neinregistrat va fi redirectionat sa isi faca un cont atunci cand incearca adaugarea unui produs in cos. Atunci cand nu are cont, el poate doar sa vizualizeze produsele si comentariile asociate acestora (0.5p).
➢ Atunci cand un utilizator devine utilizator inregistrat poate sa plaseze comenzi (sa adauge produse in cos) si sa lase review-uri (nota sau text), pe care ulterior le poate edita sau sterge (1.0p). Atunci cand un utilizator adauga un produs in cos, acesta poate selecta si cantitatea. In momentul in care se plaseaza (fictiv) comanda, stocul produsului trebuie sa scada corespunzator, in functie de numarul de produse achizitionate (0.5p).
➢ Produsele pot fi cautate dupa denumire prin intermediul unui motor de cautare. De asemenea, produsele nu trebuie cautate dupa tot numele. Ele trebuie sa fie gasite si in cazul in care un utilizator cauta doar anumite parti care compun denumirea (1.0p).
➢ Rezultatele motorului de cautare pot fi sortate crescator, respective descrescator, in functie de pret si numarul de stele (se vor implementa filtre din care un utilizator poate sa aleaga) (0.5p).
➢ Administratorul poate sterge si edita atat produse, cat si comentarii. Acesta poate, de asemenea, sa activeze sau sa revoce drepturile utilizatorilor (1.0p).

In cadrul prezentarii finale, proiectul trebuie sa contina date coerente care sa simuleze cat mai bine realitatea. Trebuie sa existe un set de date fictive pentru baza de date, fiecare inregistrare respectand tiparele si structura datelor reale, astfel incat sa se creeze un model consistent si omogen. Evitati datele generate aleatoriu.

• Se acorda 1 punct din oficiu
• Atentie la observatiile aflate la finalul documentului!

Exemplu de SaaS cu functionalitati similare: EMAG
[https://www.emag.ro/]
EMAG – magazine online care contine produse din diferite categorii.

OBSERVATII

➢ Proiectele trebuie realizate in ASP.NET MVC Core 8.0;
➢ CITITI toate explicatiile si observatiile legate de proiect prezente in
Cursul Introductiv din Saptamana 1 (curs introductiv – sistem de notare)- https://www.cezarabenegui.com/curs-introductiv-sistem-de-notare/ ;

➢ Interfata cu utilizatorul trebuie sa existe. Se poate utiliza Bootstrap sau chiar si un template. Pentru lipsa totala a designului se scad pana la 2 pct – trebuie sa existe pagini “curate” cu un design usor de parcurs, iar elementele din pagina sa fie aliniate corespunzator. Vom studia in cadrul cursurilor si acest aspect, urmand sa primiti mult mai multe detalii si explicatii;
➢ Atentie la campurile obligatorii in momentul completarii datelor in formulare, cat si la respectarea tipului de date pentru fiecare camp existent (integrarea validarilor). Daca nu exista validari, se scade punctajul pentru componenta respectiva;
➢ Accesarea paginilor sa se realizeze prin intermediul butoanelor sau link-urilor (paginile nu se vor accesa scriind manual URL-ul);
➢ Administratorul are control deplin asupra aplicatiei (poate face CRUD – CREATE, READ, UPDATE, DELETE – adauga, vizualizeaza, editeaza, sterge orice tip de informatie corespunzatoare aplicatiei);
➢ Fiecare membru al echipei prezinta functionalitatile pe care le-a implementat (modul de impartire a cerintelor este explicat detaliat in cursul introductiv);
➢ Pentru gestionarea task-urile se foloseste https://trello.com/ sau https://www.atlassian.com/software/jira
➢ Nota maxima se obtine in momentul in care se respecta cerintele, dar si aceste reguli esentiale dezvoltarii unei aplicatii web;
➢ Se utilizeaza GIT
➢ Se redacteaza raportul, conform cerintelor din cursul introductiv